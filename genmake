#!/bin/bash
if [[ $1 = "help" ]]
then
	echo "+-_-_-_-_-_-_-_-_-_-_-_-_+"
	echo "| Utilisation de genmake |"
	echo "+-_-_-_-_-_-_-_-_-_-_-_-_+"
	echo -e "\nIl faut se placer à la racine du projet tel que suit :"
	echo "./auteur"
	echo "./srcs/*.c"
	echo "./includes/*.h"
	echo -e "\nPuis :"
	echo -e "genmake nom_de_l'exécutable\n"
	echo -e "Vous disposez des options suivantes :"
	echo -e "libft   : pour que le makefile utilise la libft"
	echo -e "mlx     : pour que le makefile utilise les lib pour mlx"
	echo -e "termcap : pour que le makefile utilise la lib termcap"
	echo -e "math    : pour que le makefile utilise la lib math"
	echo -e "lib     : pour dire au makefile que vous souhaitez faire une librairie"
	echo -e "/!\\ Cette derniere option n'est  pas compatibles avec les autres, mais le script ne vous empeche pas de les faire\n"
	echo -e "Si le fichier Makefile existe déjà, il est renommé en Makefile.back\n"
else

#
# Récupération des paramètres
#
	while [ $# -gt 0 ]
	do
		if [ $1 = "libft" ]
		then
			LIBFT=OK
		elif [ $1 = "lib" ]
		then
			LIB=OK
		elif [ $1 = "mlx" ]
		then
			MLX=OK
		elif [ $1 = "termcap" ]
		then
			TERMCAP=OK
		elif [ $1 = "math" ]
		then
			MATH=OK
		elif [ $1 = "printf" ]
		then
			PRINTF=OK
		else
			OUTPUT=$1
		fi
		shift 1
	done
	NAME=Makefile
	if [ -f $NAME ]
	then
		mv $NAME $NAME.back
	fi

#
# Création du fichier avec le header
#
	touch $NAME
	~/scripts/header_42 $NAME "#"

#
# Écriture des répertoires
#
	echo -e "\nCPATH = srcs" >> $NAME
	echo -e "HPATH = includes" >> $NAME
	echo -e "OPATH = obj" >> $NAME
	if [ "$LIBFT" = "OK" ]
	then
		echo -e "LIBFTPATH = libft" >> $NAME
	fi
	if [ "$PRINTF" = "OK" ]
	then
		echo -e "PRINTFPATH = ft_printf" >> $NAME
	fi
	if [ "$MLX" = "OK" ]
	then
		echo -e "MLXPATH = /usr/X11/lib" >> $NAME
		echo -e "XPATH = /usr/X11/include/X11" >> $NAME
	fi

#
# Écriture des chemins vers les éxécutables
#
	echo -e "\nCC = /usr/bin/gcc" >> $NAME
	echo -e "MKDIR = /bin/mkdir" >> $NAME
	echo -e "RM = /bin/rm" >> $NAME

#
# Écriture des flags
#
	CFLAGS=" -Wall -Wextra -Werror -I \$(HPATH)"
	if [ "$LIBFT" = "OK" ]
	then
		CFLAGS="$CFLAGS -I \$(LIBFTPATH)/\$(HPATH)"
	fi
	if [ "$PRINTF" = "OK" ]
	then
		CFLAGS="$CFLAGS -I \$(PRINTFPATH)/\$(HPATH)"
	fi
	if [ "$MLX" = "OK" ]
	then
		CFLAGS="$CFLAGS -I \$(XPATH)"
	fi
	echo -e "CFLAGS =$CFLAGS" >> $NAME
	if [ "$LIBFT" = "OK" ]
	then
		LDFLAGS="$LDFLAGS -L \$(LIBFTPATH) -lft"
	fi
	if [ "$PRINTF" = "OK" ]
	then
		LDFLAGS="$LDFLAGS -L \$(PRINTFPATH) -lftprintf"
	fi
	if [ "$MLX" = "OK" ]
	then
		LDFLAGS="$LDFLAGS -L \$(MLXPATH) -lmlx -lXext -lX11"
	fi
	if [ "$TERMCAP" = "OK" ]
	then
		LDFLAGS="$LDFLAGS -ltermcap"
	fi
	if [ "$MATH" = "OK" ]
	then
		LDFLAGS="$LDFLAGS -lm"
	fi
	if [ "$LIB" != "OK" ]
	then
		echo -e "LDFLAGS =$LDFLAGS" >> $NAME
	fi

#
# Écriture des noms
#
	echo -e "\nNAME = $OUTPUT" >> $NAME
	if [ "$LIBFT" = "OK" ]
	then
		echo -e "LIBFT = \$(LIBFTPATH)/libft.a" >> $NAME
	fi
	if [ "$PRINTF" = "OK" ]
	then
		echo -e "PRINTF = \$(PRINTFPATH)/libftpintf.a" >> $NAME
	fi
	if [ "$LIB" = "OK" ]
	then
		echo -e "AR = /usr/bin/ar" >> $NAME
		echo -e "RANLIB = /usr/bin/ranlib" >> $NAME
	fi

#
# Récupérations des sources
#
	HEADERS=$(ls includes | grep "\.h" | grep -v "\~")
	HEADER="HEADER = "
	for FILE in $HEADERS
	do
		if [[ -z $MARK ]]
		then
			HEADER="$HEADER$FILE"
			MARK="done"
		else
			HEADER="$HEADER ∑\n\t$FILE"
		fi
	done
	echo -e "\n$HEADER" | sed 's/∑/\\/g'>> $NAME
	SRCS=$(ls srcs | grep "\.c" | grep -v "\~")
	SRC="SRC = "
	for FILE in $SRCS
	do
		if [[ -z $MARK2 ]]
		then
			SRC="$SRC$FILE"
			MARK2="done"
		else
			SRC="$SRC ∑\n\t$FILE"
		fi
	done
	echo -e "\n$SRC" | sed 's/∑/\\/g'>> $NAME

#
# Composition des chemins
#
	echo -e "\nHFILES = \$(patsubst %,\$(HPATH)/%, \$(HEADER))" >> $NAME
	echo -e "CFILES = \$(patsubst %,\$(CPATH)/%, \$(SRC))" >> $NAME
	echo -e "OFILES = \$(patsubst %.c,\$(OPATH)/%.o, \$(SRC))" >> $NAME

#
# Définition de la règles all
#
	ALL="\nall: \$(OPATH)"
	if [ "$LIBFT" = "OK" ]
	then
		ALL="$ALL \$(LIBFT)"
	fi
	if [ "$PRINTF" = "OK" ]
	then
		ALL="$ALL \$(PRINTF)"
	fi
	ALL="$ALL \$(NAME)"
	echo -e $ALL >> $NAME;

#
# Définition de la règles $(NAME)
#
	echo -e "\n\$(NAME): \$(OFILES)" >> $NAME
	echo -e "\t@echo \"Building \$(NAME)\"" >> $NAME
	if [ "$LIB" = "OK" ]
	then
		echo -e "\t@\$(AR) rc \$(NAME) \$^" >> $NAME
		echo -e "\t@\$(RANLIB) \$(NAME)" >> $NAME
	else
		echo -e "\t@\$(CC) \$(LDFLAGS) \$^ -o \$@" >> $NAME
	fi

#
# Définition de la règle %.o
#
	echo -e "\n\$(OPATH)/%.o: \$(CPATH)/%.c \$(HFILES)" >> $NAME
	echo -e "\t@echo \"Creating file \$@\"" >> $NAME
	echo -e "\t@\$(CC) \$(CFLAGS) -c \$< -o \$@" >> $NAME

#
# Définition de la règle clean
#
	echo -e "\nclean:" >> $NAME
	echo -e "\t@echo \"Deletion of building files\"" >> $NAME
	echo -e "\t@\$(RM) -rf \$(OPATH)" >> $NAME

#
# Définition de la règle fclean
#
	echo -e "\nfclean: clean" >> $NAME
	echo -e "\t@echo \"Deletion of \$(NAME)\"" >> $NAME
	echo -e "\t@\$(RM) -f \$(NAME)" >> $NAME

#
# Définition de la règle re
#
	echo -e "\nre: fclean all" >> $NAME

#
# Définition de la règle $(OPATH)
#
	echo -e "\n\$(OPATH):" >> $NAME
	echo -e "\t@echo \"Creation of building directory\"" >> $NAME
	echo -e "\t@\$(MKDIR) \$(OPATH)" >> $NAME

#
# Définition des règles pour la libft
#
	if [ "$LIBFT" = "OK" ]
	then
		echo -e "\n\$(LIBFT):" >> $NAME
		echo -e "\t@make -C \$(LIBFTPATH)" >> $NAME

		echo -e "\nlibft: \$(LIBFT)" >> $NAME

		echo -e "\nlibft.clean:" >> $NAME
		echo -e "\t@make -C \$(LIBFTPATH) clean" >> $NAME

		echo -e "\nlibft.fclean:" >> $NAME
		echo -e "\t@make -C \$(LIBFTPATH) fclean" >> $NAME

		echo -e "\nlibft.re: libft.fclean libft" >> $NAME
	fi

#
# Définition des règles pour la libft
#
	if [ "$PRINTF" = "OK" ]
	then
		echo -e "\n\$(PRINTF):" >> $NAME
		echo -e "\t@make -C \$(PRINTFPATH)" >> $NAME

		echo -e "\nft_printf: \$(PRINTF)" >> $NAME

		echo -e "\nft_printf.clean:" >> $NAME
		echo -e "\t@make -C \$(PRINTFPATH) clean" >> $NAME

		echo -e "\nft_printf.fclean:" >> $NAME
		echo -e "\t@make -C \$(PRINTFPATH) fclean" >> $NAME

		echo -e "\nft_printf.re: ft_printf.fclean ft_printf" >> $NAME
	fi
fi
